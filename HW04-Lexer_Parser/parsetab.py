# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = "3.10"

_lr_method = "LALR"

_lr_signature = "EMPTY END_OF_LINE NON_TERMINAL RULE SEPARATOR START TERMINALexpr : STARTexpr : NON_TERMINAL RULE desc END_OF_LINEdesc : concatdesc : desc SEPARATOR concatconcat : elemconcat : concat elemelem : TERMINALelem : NON_TERMINALelem : EMPTY"

_lr_action_items = {
    "START": (
        [
            0,
        ],
        [
            2,
        ],
    ),
    "NON_TERMINAL": (
        [
            0,
            4,
            5,
            7,
            8,
            9,
            10,
            12,
            13,
            14,
        ],
        [
            3,
            5,
            -8,
            5,
            -5,
            -7,
            -9,
            5,
            -6,
            5,
        ],
    ),
    "$end": (
        [
            1,
            2,
            11,
        ],
        [
            0,
            -1,
            -2,
        ],
    ),
    "RULE": (
        [
            3,
        ],
        [
            4,
        ],
    ),
    "TERMINAL": (
        [
            4,
            5,
            7,
            8,
            9,
            10,
            12,
            13,
            14,
        ],
        [
            9,
            -8,
            9,
            -5,
            -7,
            -9,
            9,
            -6,
            9,
        ],
    ),
    "EMPTY": (
        [
            4,
            5,
            7,
            8,
            9,
            10,
            12,
            13,
            14,
        ],
        [
            10,
            -8,
            10,
            -5,
            -7,
            -9,
            10,
            -6,
            10,
        ],
    ),
    "END_OF_LINE": (
        [
            5,
            6,
            7,
            8,
            9,
            10,
            13,
            14,
        ],
        [
            -8,
            11,
            -3,
            -5,
            -7,
            -9,
            -6,
            -4,
        ],
    ),
    "SEPARATOR": (
        [
            5,
            6,
            7,
            8,
            9,
            10,
            13,
            14,
        ],
        [
            -8,
            12,
            -3,
            -5,
            -7,
            -9,
            -6,
            -4,
        ],
    ),
}

_lr_action = {}
for _k, _v in _lr_action_items.items():
    for _x, _y in zip(_v[0], _v[1]):
        if not _x in _lr_action:
            _lr_action[_x] = {}
        _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {
    "expr": (
        [
            0,
        ],
        [
            1,
        ],
    ),
    "desc": (
        [
            4,
        ],
        [
            6,
        ],
    ),
    "concat": (
        [
            4,
            12,
        ],
        [
            7,
            14,
        ],
    ),
    "elem": (
        [
            4,
            7,
            12,
            14,
        ],
        [
            8,
            13,
            8,
            13,
        ],
    ),
}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
    for _x, _y in zip(_v[0], _v[1]):
        if not _x in _lr_goto:
            _lr_goto[_x] = {}
        _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
    ("S' -> expr", "S'", 1, None, None, None),
    ("expr -> START", "expr", 1, "p_start", "parser.py", 47),
    (
        "expr -> NON_TERMINAL RULE desc END_OF_LINE",
        "expr",
        4,
        "p_rule",
        "parser.py",
        62,
    ),
    ("desc -> concat", "desc", 1, "p_rule_description", "parser.py", 68),
    (
        "desc -> desc SEPARATOR concat",
        "desc",
        3,
        "p_part_rule_description",
        "parser.py",
        73,
    ),
    ("concat -> elem", "concat", 1, "p_concat_elem", "parser.py", 78),
    ("concat -> concat elem", "concat", 2, "p_concat_elems", "parser.py", 83),
    ("elem -> TERMINAL", "elem", 1, "p_token_term", "parser.py", 88),
    ("elem -> NON_TERMINAL", "elem", 1, "p_elem_non_terminal", "parser.py", 94),
    ("elem -> EMPTY", "elem", 1, "p_elem_empty", "parser.py", 100),
]
